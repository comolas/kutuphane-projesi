rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isValidString(str, minLen, maxLen) {
      return str is string && str.size() >= minLen && str.size() <= maxLen;
    }
    
    function isValidEmail(email) {
      return email is string && email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Check for admin role in the user's document in the 'users' collection
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    function isAdminOrSuperAdmin() {
      let role = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return role == 'admin' || role == 'superadmin';
    }
    
    function getUserCampusId() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.campusId;
    }
    
    function isSameCampus(campusId) {
      return isSuperAdmin() || getUserCampusId() == campusId;
    }
    
    function isTeacher() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }
    
    function canChatWith(otherUserId) {
      let currentUser = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      let otherUser = get(/databases/$(database)/documents/users/$(otherUserId)).data;
      
      return currentUser.role == 'admin' || 
             otherUser.role == 'admin' ||
             (currentUser.role == 'teacher' && 'teacherData' in currentUser && 'assignedClass' in currentUser.teacherData && 'studentClass' in otherUser && currentUser.teacherData.assignedClass == otherUser.studentClass) ||
             (otherUser.role == 'teacher' && 'teacherData' in otherUser && 'assignedClass' in otherUser.teacherData && 'studentClass' in currentUser && otherUser.teacherData.assignedClass == currentUser.studentClass);
    }

    // Users collection rules
    match /users/{userId} {
      // Allow authenticated users to read their own data and any user data (needed for chat)
      allow read: if isAuthenticated();
      
      // Allow user creation during registration
      allow create: if request.auth.uid == userId &&
        request.resource.data.uid == userId &&
        request.resource.data.email == request.auth.token.email &&
        isValidEmail(request.resource.data.email) &&
        request.resource.data.role == 'user' &&
        isValidString(request.resource.data.displayName, 2, 100) &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.lastLogin is timestamp;
      
      // Allow users to update their own data, admins to update any user, and super admins to update any user
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin() || isSuperAdmin());
      
      // Allow admin to delete users
      allow delete: if isAdmin();
    }

    // Books collection rules
    match /books/{bookId} {
      // Allow authenticated users to read books
      allow read: if isAuthenticated();
      
      // Only admins can create books for their campus
      allow create: if isAdmin() && isSameCampus(request.resource.data.campusId);

      allow delete: if isAdmin() && isSameCampus(resource.data.campusId);

      // Allow users to update ratings and admins to update any field in their campus
      allow update: if (isAdmin() && isSameCampus(resource.data.campusId)) || (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['ratings']));
    }

    // Authors collection rules
    match /authors/{authorId} {
      // Allow authenticated users to read authors
      allow read: if isAuthenticated();
      
      // Only admins can create, update, or delete authors for their campus
      allow create: if isAdmin() && isSameCampus(request.resource.data.campusId);
      allow update, delete: if isAdmin() && isSameCampus(resource.data.campusId);
    }

    // Magazines collection rules
    match /magazines/{magazineId} {
      // Allow authenticated users to read magazines
      allow read: if isAuthenticated();
      
      // Only admins can create, update, or delete magazines for their campus
      allow create: if isAdmin() && isSameCampus(request.resource.data.campusId);
      allow update, delete: if isAdmin() && isSameCampus(resource.data.campusId);
    }

    // Reading Goals collection rules
    match /readingGoals/{userId_goalType} {
      allow read: if isAuthenticated() && request.auth.uid == userId_goalType.split('_')[0];
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Events collection rules
    match /events/{eventId} {
      // Allow authenticated users to read events
      allow read: if isAuthenticated();
      
      // Only admins can create, update, or delete events for their campus
      allow create: if isAdmin() && isSameCampus(request.resource.data.campusId);
      allow update, delete: if isAdmin() && isSameCampus(resource.data.campusId);
    }

    // Event Registrations collection rules
    match /eventRegistrations/{registrationId} {
      // Allow admin to read registrations from their campus, and users to read their own
      allow read: if (isAdmin() && isSameCampus(resource.data.campusId)) || (isAuthenticated() && resource.data.userId == request.auth.uid);

      // Allow authenticated users to create their own registration
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;

      // Allow users to delete their own registration, and admins to delete from their campus
      allow delete: if isAuthenticated() && (resource.data.userId == request.auth.uid || (isAdmin() && isSameCampus(resource.data.campusId)));

      // Do not allow updates
      allow update: if false;
    }

    // Book statuses collection rules
    match /bookStatuses/{bookId} {
      // Allow any authenticated user to read book statuses
      allow read: if isAuthenticated();
      
      // Only admins can create, update, and delete book statuses
      allow create, update, delete: if isAdminOrSuperAdmin();
    }

    // User tasks collection rules
    match /userTasks/{taskId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      
      // Allow task creation during user registration and by the task owner
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.lastReset is timestamp;
      
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      
      allow delete: if isAdmin();
    }

    // User achievements collection rules
    match /userAchievements/{achievementId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.completedAt is timestamp;
      
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      
      allow delete: if isAdmin();
    }

    // User events collection rules
    match /userEvents/{document=**} {
      // Allow read if authenticated and the document belongs to the user or is admin
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      
      // Allow create if authenticated and the user is creating their own event registration
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.registeredAt is timestamp;
      
      // Allow delete if authenticated and the document belongs to the user or is admin
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      
      // Prevent updates to event registrations
      allow update: if false;
    }

    // Requests collection rules
    match /requests/{requestId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || (isAdmin() && isSameCampus(resource.data.campusId)));
      
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.createdAt is timestamp &&
        isValidString(request.resource.data.title, 3, 200) &&
        isValidString(request.resource.data.content, 10, 2000) &&
        request.resource.data.priority in ['low', 'medium', 'high'] &&
        request.resource.data.category in ['Kitap Önerisi', 'Teknik Sorun', 'Üyelik Bilgileri', 'Genel Geri Bildirim'] &&
        request.resource.data.status == 'pending';
      
      allow update: if isAdmin() && isSameCampus(resource.data.campusId);
      allow delete: if (isAdmin() && isSameCampus(resource.data.campusId)) || (isOwner(resource.data.userId) && resource.data.status == 'pending');
    }

    // Borrowed books collection rules
    match /borrowedBooks/{borrowedId} {
      allow read: if isAuthenticated();
      
      // Allow users to create their own borrow records, and admins to create for their campus
      allow create: if isAuthenticated() && (request.auth.uid == request.resource.data.userId || (isAdminOrSuperAdmin() && isSameCampus(request.resource.data.campusId)));
      
      // Allow admins from same campus and book owners to update records
      allow update: if isAuthenticated() && (
        (isAdminOrSuperAdmin() && isSameCampus(resource.data.campusId)) ||
        (isOwner(resource.data.userId) &&
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['extended', 'dueDate', 'returnStatus', 'maxExtensions', 'extensionCount', 'returnRequestDate', 'returnDate', 'fineStatus', 'paymentDate', 'fineAmountSnapshot', 'fineRateSnapshot', 'daysOverdueSnapshot', 'discountApplied', 'originalFineAmount']) &&
          (
            (request.resource.data.extended == true && !resource.data.extended) ||
            request.resource.data.returnStatus in ['borrowed', 'returned', 'pending'] ||
            request.resource.data.maxExtensions is int ||
            request.resource.data.fineStatus in ['pending', 'paid']
          ))
      );
      
      // Allow admins to delete borrowed book records from their campus
      allow delete: if isAdminOrSuperAdmin() && isSameCampus(resource.data.campusId);
    }

    // Borrows collection rules (for super admin dashboard)
    match /borrows/{borrowId} {
      // Allow authenticated users to read borrows
      allow read: if isAuthenticated();
      
      // Allow users to create their own borrow records, and admins to create for their campus
      allow create: if isAuthenticated() && (request.auth.uid == request.resource.data.userId || isAdminOrSuperAdmin());
      
      // Allow admins and super admins to update records
      allow update: if isAdminOrSuperAdmin();
      
      // Allow admins and super admins to delete records
      allow delete: if isAdminOrSuperAdmin();
    }

    // Borrow messages collection rules
    match /borrowMessages/{messageId} {
      // Allow admin to read messages from their campus, users can read their own
      allow read: if isAuthenticated() && ((isAdminOrSuperAdmin() && isSameCampus(resource.data.campusId)) || resource.data.userId == request.auth.uid);
      
      // Allow users to create borrow requests
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.status == 'pending';
      
      // Allow admins to update borrow messages from their campus
      allow update: if isAuthenticated() && isAdminOrSuperAdmin() && isSameCampus(resource.data.campusId);
      allow delete: if isAdminOrSuperAdmin() && isSameCampus(resource.data.campusId);
    }

    // Return messages collection rules
    match /returnMessages/{messageId} {
      allow read: if isAuthenticated() && ((isAdmin() && isSameCampus(resource.data.campusId)) || resource.data.userId == request.auth.uid);
      
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.status == 'pending';
      
      // Allow admins to update return messages from their campus
      allow update: if isAdmin() && isSameCampus(resource.data.campusId);
      allow delete: if isAdmin() && isSameCampus(resource.data.campusId);
    }

    // Quotes collection rules
    match /quotes/{quoteId} {
      allow read: if isAuthenticated() && (isSuperAdmin() || !isAdmin() || isSameCampus(resource.data.campusId));
      allow create: if isAdmin() && isSameCampus(request.resource.data.campusId);
      allow update, delete: if isAdmin() && isSameCampus(resource.data.campusId);
    }

    // Leaderboards collection rules
    match /leaderboards/{leaderboardId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Favorites collection rules
    match /favorites/{favoriteId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId &&
        request.resource.data.bookId is string &&
        request.resource.data.addedAt is timestamp;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Shelves collection rules
    match /shelves/{shelfId} {
      allow read, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Surveys collection rules
    match /surveys/{surveyId} {
      // Allow any authenticated user to read surveys
      allow read: if isAuthenticated();
      
      // Only admins can create, update, or delete surveys
      allow create, update, delete: if isAdmin();
    }

    // Announcements collection rules
    match /announcements/{announcementId} {
      // Allow only authenticated users to read announcements
      allow read: if isAuthenticated();
      
      // Only admins can create, update, or delete announcements
      allow create, update, delete: if isAdmin();
    }

    // Reviews collection rules
    match /reviews/{reviewId} {
      // Logged-in users can read approved reviews. Admins can read reviews from their campus.
      allow read: if (resource.data.status == 'approved' && isAuthenticated()) || (isAdmin() && isSameCampus(resource.data.campusId));

      // Authenticated users can create their own reviews
      allow create: if isAuthenticated()
                    && request.auth.uid == request.resource.data.userId
                    && request.resource.data.userDisplayName is string
                    && request.resource.data.bookId is string
                    && request.resource.data.rating is number
                    && request.resource.data.rating >= 1 && request.resource.data.rating <= 5
                    && request.resource.data.reviewText is string
                    && request.resource.data.reviewText.size() <= 1000
                    && request.resource.data.createdAt is timestamp
                    && request.resource.data.status == 'pending';

      // Allow users to update the helpfulVotes array, but only to add their own UID.
      allow update: if isAuthenticated()
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['helpfulVotes'])
                    && request.resource.data.helpfulVotes.hasAll(resource.data.helpfulVotes)
                    && request.resource.data.helpfulVotes.size() == resource.data.helpfulVotes.size() + 1
                    && request.auth.uid in request.resource.data.helpfulVotes;

      // Admins can update status or delete from their campus.
      allow update, delete: if isAdmin() && isSameCampus(resource.data.campusId);
    }

    // App Info collection rules (for version checking)
    match /appInfo/{docId} {
      // Allow only authenticated users to read app information
      allow read: if isAuthenticated();
      
      // Only admins can write to this collection
      allow write: if isAdmin();
    }

    // Story Collections rules
    match /collections/{collectionId} {
      // Any authenticated user can read collections
      allow read, list: if isAuthenticated();
      
      // Only admins can create, update, or delete collections for their campus
      allow create: if isAdmin() && isSameCampus(request.resource.data.campusId);
      allow update, delete: if isAdmin() && isSameCampus(resource.data.campusId);
    }

    // Games collection rules
    match /games/{gameId} {
      // Allow authenticated users to read games
      allow read: if isAuthenticated();
      
      // Only admins can create, update, or delete games for their campus
      allow create: if isAdmin() && isSameCampus(request.resource.data.campusId);
      allow update, delete: if isAdmin() && isSameCampus(resource.data.campusId);
    }

    // Game Reservations collection rules
    match /gameReservations/{reservationId} {
      // Allow authenticated users to read reservations
      allow read: if isAuthenticated();

      // Allow authenticated users to create their own reservations
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;

      // Allow users to update/delete their own reservations, and admins from same campus
      allow update, delete: if isAuthenticated() && (isOwner(resource.data.userId) || (isAdmin() && isSameCampus(resource.data.campusId)));
    }

    // Transactions collection rules
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && (isAdminOrSuperAdmin() || resource.data.userId == request.auth.uid);
      allow create: if isAdminOrSuperAdmin() && isSameCampus(request.resource.data.campusId);
      allow update, delete: if isAdminOrSuperAdmin() && isSameCampus(resource.data.campusId);
    }

    // Settings collection rules
    match /settings/{settingId} {
      // Allow any authenticated user to read and list settings
      allow read, list: if isAuthenticated();
      
      // Only admins can write to this collection
      allow write: if isAdmin();
    }

    // Spin Wheel Settings
    match /settings/spinWheel {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // User Spin Data
    match /users/{userId}/spinData/{document=**} {
      allow read, write: if isAuthenticated() && isOwner(userId);
    }

    // Rule to allow admins to perform collection group queries on coupons
    match /{path=**}/coupons/{couponId} {
      allow read: if isAdmin();
    }

    // User Coupons
    match /users/{userId}/coupons/{couponId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }

    // Spin Logs (for statistics)
    match /spinLogs/{logId} {
      allow read: if isAuthenticated() && (isAdmin() || resource.data.userId == request.auth.uid);
      allow write: if isAuthenticated();
    }

    // Posts collection rules
    match /posts/{postId} {
      // Allow authenticated users to read approved posts, admins can read posts from their campus, authors can read their own
      allow read: if (resource.data.status == 'approved' && isAuthenticated()) || (isAdmin() && isSameCampus(resource.data.campusId)) || (isAuthenticated() && resource.data.authorId == request.auth.uid);
      
      // Allow authenticated users to create posts with pending status
      allow create: if isAuthenticated() && 
        request.resource.data.authorId == request.auth.uid &&
        isValidString(request.resource.data.title, 5, 200) &&
        isValidString(request.resource.data.content, 50, 50000) &&
        request.resource.data.status == 'pending';
      
      // Allow users to update likes array, admins from same campus can update anything, authors can update their own posts
      allow update: if isAuthenticated() && 
        ((isAdmin() && isSameCampus(resource.data.campusId)) || 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes']) ||
         (resource.data.authorId == request.auth.uid && request.resource.data.status == 'pending'));
      
      // Allow admins from same campus and authors to delete posts
      allow delete: if (isAdmin() && isSameCampus(resource.data.campusId)) || (isAuthenticated() && resource.data.authorId == request.auth.uid);
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
        allow update: if isAuthenticated() && (request.auth.uid == resource.data.authorId || isAdmin());
        allow delete: if isAuthenticated() && (request.auth.uid == resource.data.authorId || isAdmin());
      }
    }

    // Comments collection rules
    match /comments/{commentId} {
      // Allow authenticated users to read comments
      allow read: if isAuthenticated();
      
      // Allow authenticated users to create their own comments
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        isValidString(request.resource.data.text, 1, 1000);
      
      // Allow users to delete their own comments, admins can delete any
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      
      // No updates allowed
      allow update: if false;
    }

    // Messages collection rules
    match /messages/{messageId} {
      // Allow admins to read all messages
      allow read: if isAdmin();
      
      // Allow authenticated users to create messages with validation
      allow create: if isAuthenticated() &&
        isValidString(request.resource.data.content, 1, 5000) &&
        request.resource.data.senderId == request.auth.uid;
      
      // Allow admins to update and delete messages
      allow update, delete: if isAdmin();
    }

    // Teacher Notes collection rules
    match /teacherNotes/{studentId} {
      // Allow teachers to read and write notes for their students
      allow read, write: if isAuthenticated() && isTeacher();
      
      // Allow admins to read and write all notes
      allow read, write: if isAdmin();
    }

    // Products collection rules
    match /products/{productId} {
      // Allow authenticated users to read products
      allow read: if isAuthenticated();
      
      // Only admins can create, update, or delete products for their campus
      allow create: if isAdmin() && isSameCampus(request.resource.data.campusId);
      allow update, delete: if isAdmin() && isSameCampus(resource.data.campusId);
    }

    // Shop Items collection rules
    match /shopItems/{itemId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() && isSameCampus(request.resource.data.campusId);
      allow update, delete: if isAdmin() && isSameCampus(resource.data.campusId);
    }

    // Orders collection rules
    match /orders/{orderId} {
      // Allow users to read their own orders, admins can read orders from their campus
      allow read: if isAuthenticated() && ((isAdmin() && isSameCampus(resource.data.campusId)) || resource.data.userId == request.auth.uid);
      
      // Allow authenticated users to create their own orders
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Allow admins from same campus to update orders, users can only update status to 'cancelled' for their own pending orders
      allow update: if (isAdmin() && isSameCampus(resource.data.campusId)) || 
        (isAuthenticated() && 
         resource.data.userId == request.auth.uid && 
         resource.data.status == 'pending' &&
         request.resource.data.status == 'cancelled' &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']));
      
      // Only admins from same campus can delete orders
      allow delete: if isAdmin() && isSameCampus(resource.data.campusId);
    }

    // Budget collection rules
    match /budget/{budgetId} {
      // Allow authenticated users to read budget entries
      allow read: if isAuthenticated();
      
      // Only admins can create, update, or delete budget entries for their campus
      allow create: if isAdmin() && isSameCampus(request.resource.data.campusId);
      allow update, delete: if isAdmin() && isSameCampus(resource.data.campusId);
    }

    // Campuses collection rules
    match /campuses/{campusId} {
      // Allow everyone to read campuses (needed for registration)
      allow read: if true;
      
      // Allow listing campuses for authenticated users
      allow list: if isAuthenticated();
      
      // Only super admins can create, update, or delete campuses
      allow create, update, delete: if isSuperAdmin();
    }

    // Page Access collection rules
    match /pageAccess/{campusId} {
      // Allow authenticated users to read page access for their campus
      allow read: if isAuthenticated();
      
      // Only super admins can create, update, or delete page access
      allow create, update, delete: if isSuperAdmin();
    }

    // Card Templates collection rules
    match /cardTemplates/{campusId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() && isSameCampus(campusId);
    }

    // Library Cards collection rules
    match /libraryCards/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Allowed Users collection rules
    match /allowedUsers/{userId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }

    // Challenges collection rules
    match /challenges/{challengeId} {
      allow read: if isAuthenticated() && isSameCampus(resource.data.campusId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.creatorId && isSameCampus(request.resource.data.campusId);
      allow update: if isAuthenticated() && (request.auth.uid == resource.data.creatorId || request.auth.uid == resource.data.opponentId || isAdmin()) && isSameCampus(resource.data.campusId);
      allow delete: if isAdmin() && isSameCampus(resource.data.campusId);
    }

    // Physical Rewards collection rules
    match /physicalRewards/{rewardId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() && isSameCampus(request.resource.data.campusId);
      allow update, delete: if isAdmin() && isSameCampus(resource.data.campusId);
    }

    // Reward Coupons collection rules
    match /rewardCoupons/{couponId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAdmin();
    }

    // Reward Claims collection rules
    match /rewardClaims/{claimId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || (isAdmin() && isSameCampus(resource.data.campusId)));
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update: if (isAdmin() && isSameCampus(resource.data.campusId)) || (isAuthenticated() && request.auth.uid == resource.data.userId);
      allow delete: if isAdmin() && isSameCampus(resource.data.campusId);
    }

    // Conversations collection rules
    match /conversations/{conversationId} {
      // Allow read if user is a participant
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
      
      // Allow create if user is a participant and can chat with the other participant
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants &&
        request.resource.data.participants.size() == 2 &&
        canChatWith(request.resource.data.participants[0] == request.auth.uid ? request.resource.data.participants[1] : request.resource.data.participants[0]);
      
      // Allow update if user is a participant
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participants;
      
      // Messages subcollection
      match /messages/{messageId} {
        // Allow read if user is a participant of the conversation
        allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        
        // Allow create if user is the sender and a participant
        allow create: if isAuthenticated() && 
          request.auth.uid == request.resource.data.senderId &&
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        
        // Allow update for marking as read
        allow update: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }

    // Notifications collection rules
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      
      // Only system (functions) can create notifications
      allow create: if false;
      
      // Users can update their own notifications (mark as read, delete)
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
  }
}