/* eslint-disable @typescript-eslint/no-explicit-any */
import { onCall, HttpsError, onRequest } from "firebase-functions/v2/https";
import { onSchedule } from "firebase-functions/v2/scheduler";
import * as logger from "firebase-functions/logger";
import * as admin from "firebase-admin";
import request = require("request");

admin.initializeApp();

export const setAdminRole = onCall(async (request: any) => {
  // **√ñNEMLƒ∞:** ƒ∞lk admin kullanƒ±cƒ±sƒ±nƒ± atadƒ±ktan sonra, g√ºvenliƒüi saƒülamak i√ßin
  // a≈üaƒüƒ±daki 'if' bloƒüunu yorum satƒ±rƒ±ndan √ßƒ±karƒ±n ve fonksiyonlarƒ± yeniden yayƒ±nlayƒ±n.
  
  // if (request.auth?.token.role !== "admin") {
  //   throw new HttpsError(
  //     "permission-denied",
  //     "Bu i≈ülemi sadece adminler yapabilir."
  //   );
  // }
  

  const email = request.data.email;
  if (!email) {
    throw new HttpsError(
      "invalid-argument",
      "E-posta adresi belirtilmedi."
    );
  }

  try {
    const user = await admin.auth().getUserByEmail(email);
    await admin.auth().setCustomUserClaims(user.uid, { role: "admin" });
    return { message: `${email} kullanƒ±cƒ±sƒ± ba≈üarƒ±yla admin yapƒ±ldƒ±.` };
  } catch (error) {
    console.error("Error setting admin role:", error);
    throw new HttpsError("internal", "Admin rol√º atanƒ±rken bir hata olu≈ütu.");
  }
});

export const deleteUser = onCall(async (request: any) => {
  // Make sure the user is an admin.
  if (request.auth?.token.role !== "admin") {
    throw new HttpsError(
      "permission-denied",
      "Bu i≈ülemi sadece adminler yapabilir."
    );
  }

  const uid = request.data.uid;
  if (!uid) {
    throw new HttpsError(
      "invalid-argument",
      "Kullanƒ±cƒ± ID'si belirtilmedi."
    );
  }

  try {
    await admin.auth().deleteUser(uid);
    console.log(`Successfully deleted user ${uid}`);
    return { message: `Kullanƒ±cƒ± ${uid} ba≈üarƒ±yla silindi.` };
  } catch (error) {
    console.error("Error deleting user:", error);
    throw new HttpsError(
      "internal",
      "Kullanƒ±cƒ± silinirken bir hata olu≈ütu."
    );
  }
});

export const updateMonthlyLeaderboard = onSchedule("every 1 hours", async () => {
  logger.info("Starting monthly leaderboard update...");

  try {
    const db = admin.firestore();
    const now = new Date();
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
    const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59);

    // 1. Fetch all users and borrows
    const [usersSnapshot, borrowedBooksSnapshot] = await Promise.all([
      db.collection("users").get(),
      db.collection("borrowedBooks").get(),
    ]);

    const users = new Map<string, { name: string; studentClass: string }>();
    usersSnapshot.forEach(doc => {
      const data = doc.data();
      users.set(doc.id, { name: data.displayName, studentClass: data.studentClass });
    });

    // 2. Calculate reads for each user this month
    const userReadCounts = new Map<string, number>();
    borrowedBooksSnapshot.forEach(doc => {
      const borrow = doc.data();
      const borrowDate = borrow.borrowedAt?.toDate();

      if (borrowDate && borrowDate >= startOfMonth && borrowDate <= endOfMonth) {
        const userId = borrow.userId;
        userReadCounts.set(userId, (userReadCounts.get(userId) || 0) + 1);
      }
    });

    // 3. Create and sort the leaderboard array
    const leaderboardData = Array.from(userReadCounts.entries()).map(([userId, count]) => {
      const userData = users.get(userId);
      return {
        userId: userId,
        name: userData?.name || "Bilinmeyen Kullanƒ±cƒ±",
        studentClass: userData?.studentClass || "N/A",
        count: count,
      };
    });

    leaderboardData.sort((a, b) => b.count - a.count);

    // 4. Save the result to a dedicated document
    const leaderboardDocRef = db.collection("leaderboards").doc("monthly");
    await leaderboardDocRef.set({
      updatedAt: admin.firestore.FieldValue.serverTimestamp(),
      leaderboard: leaderboardData,
    });

    logger.info("Successfully updated monthly leaderboard.");
  } catch (error) {
    logger.error("Error updating monthly leaderboard:", error);
  }
});

export const imageProxy = onRequest({ cors: true }, (req, res) => {
  const imageUrl = req.query.url as string;

  if (!imageUrl) {
    res.status(400).send("No image URL specified.");
    return;
  }

  logger.info(`Proxying image: ${imageUrl}`);

  const options = {
    url: imageUrl,
    headers: {
      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
    }
  };

  req.pipe(request(options)).pipe(res);
});


// ============================================
// K√úT√úPHANE ASISTANI SOHBET BOTU
// ============================================

import { BedrockRuntimeClient, InvokeModelCommand } from "@aws-sdk/client-bedrock-runtime";

import { defineString } from "firebase-functions/params";
import { sanitizeInput, validateMessage, MAX_MESSAGE_LENGTH, MIN_MESSAGE_LENGTH } from "./security";

const awsAccessKeyId = defineString("AWS_ACCESS_KEY_ID");
const awsSecretAccessKey = defineString("AWS_SECRET_ACCESS_KEY");

// Rate limiting sabitleri
const HOURLY_LIMIT = 20; // Saatte maksimum 20 mesaj
const DAILY_LIMIT = 100; // G√ºnde maksimum 100 mesaj

// Fallback yanƒ±tlarƒ±
const FALLBACK_RESPONSES = [
  "Merhaba! ≈ûu anda teknik bir sorun ya≈üƒ±yorum ama yardƒ±mcƒ± olmaya √ßalƒ±≈üacaƒüƒ±m. K√ºt√ºphane saatleri, kitap √∂nerileri veya okuma istatistiklerin hakkƒ±nda sormak istediƒüin bir ≈üey var mƒ±?",
  "Sistemde ge√ßici bir aksaklƒ±k var. L√ºtfen biraz sonra tekrar dene veya k√ºt√ºphane g√∂revlilerimizden yardƒ±m isteyebilirsin.",
  "Maalesef ≈üu anda sana tam olarak yardƒ±mcƒ± olamayacaƒüƒ±m. K√ºt√ºphane uygulamasƒ±ndaki diƒüer √∂zellikleri kullanabilir veya daha sonra tekrar deneyebilirsin.",
];

function getFallbackResponse(userMessage: string, userContext: any): string {
  const lowerMessage = userMessage.toLowerCase();

  if (lowerMessage.includes("√∂ner") || lowerMessage.includes("kitap")) {
    if (userContext.recommendedBooks.length > 0) {
      return `Merhaba ${userContext.name}! ≈ûu anda AI asistanƒ±mƒ±z √ßevrimdƒ±≈üƒ±, ama sana favori kategorilerinden birka√ß kitap √∂nerebilirim:\n\n${userContext.recommendedBooks.slice(0, 3).join("\n")}\n\nDaha fazla bilgi i√ßin l√ºtfen daha sonra tekrar dene!`;
    }
    return `Merhaba ${userContext.name}! K√ºt√ºphanemizde ${userContext.availableBooksCount} kitap mevcut. Detaylƒ± √∂neriler i√ßin l√ºtfen biraz sonra tekrar dene.`;
  }

  if (lowerMessage.includes("istatistik") || lowerMessage.includes("ka√ß") || lowerMessage.includes("sayƒ±")) {
    return `Merhaba ${userContext.name}! ƒ∞≈üte okuma istatistiklerin:\n\nüìö Toplam okunan kitap: ${userContext.totalBorrowedBooks}\nüìñ ≈ûu an okuduƒüun: ${userContext.currentBooksCount}\n‚úÖ Tamamlanan: ${userContext.completedBooksCount}\nüéØ Seviye: ${userContext.level} (${userContext.xp} XP)\n\nDetaylƒ± analiz i√ßin l√ºtfen biraz sonra tekrar dene!`;
  }

  if (lowerMessage.includes("ceza") || lowerMessage.includes("bor√ß")) {
    if (userContext.activePenaltiesCount > 0) {
      return `Merhaba ${userContext.name}! ${userContext.activePenaltiesCount} adet aktif cezan var. Toplam tutar: ${userContext.totalPenaltyAmount} TL. L√ºtfen k√ºt√ºphane g√∂revlilerimizle ileti≈üime ge√ß.`;
    }
    return `Merhaba ${userContext.name}! Herhangi bir cezan bulunmuyor. üéâ`;
  }

  const randomIndex = Math.floor(Math.random() * FALLBACK_RESPONSES.length);
  return FALLBACK_RESPONSES[randomIndex];
}

// Rate limiting kontrol√º
async function checkRateLimit(userId: string): Promise<{ allowed: boolean; remaining: number; resetTime: Date }> {
  const db = admin.firestore();
  const now = new Date();
  const hourAgo = new Date(now.getTime() - 60 * 60 * 1000);
  const dayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);

  const rateLimitDoc = db.collection("rateLimits").doc(userId);
  const doc = await rateLimitDoc.get();
  const data = doc.data();

  const hourlyMessages = (data?.hourlyMessages || []).filter((ts: any) => ts.toDate() > hourAgo);
  const dailyMessages = (data?.dailyMessages || []).filter((ts: any) => ts.toDate() > dayAgo);

  if (hourlyMessages.length >= HOURLY_LIMIT) {
    const oldestHourly = hourlyMessages[0].toDate();
    const resetTime = new Date(oldestHourly.getTime() + 60 * 60 * 1000);
    return { allowed: false, remaining: 0, resetTime };
  }

  if (dailyMessages.length >= DAILY_LIMIT) {
    const oldestDaily = dailyMessages[0].toDate();
    const resetTime = new Date(oldestDaily.getTime() + 24 * 60 * 60 * 1000);
    return { allowed: false, remaining: 0, resetTime };
  }

  // Mesaj sayƒ±sƒ±nƒ± g√ºncelle
  hourlyMessages.push(admin.firestore.Timestamp.now());
  dailyMessages.push(admin.firestore.Timestamp.now());

  await rateLimitDoc.set({
    hourlyMessages,
    dailyMessages,
    lastUpdated: admin.firestore.FieldValue.serverTimestamp(),
  });

  return {
    allowed: true,
    remaining: Math.min(HOURLY_LIMIT - hourlyMessages.length, DAILY_LIMIT - dailyMessages.length),
    resetTime: new Date(now.getTime() + 60 * 60 * 1000),
  };
}

// Kullanƒ±cƒ± context'ini Firestore'dan √ßek
async function getUserContext(userId: string) {
  const db = admin.firestore();
  
  try {
    // Kullanƒ±cƒ± bilgileri
    const userDoc = await db.collection("users").doc(userId).get();
    const userData = userDoc.data();

    // √ñd√ºn√ß alƒ±nan kitaplar, cezalar ve yorumlar paralel √ßek
    const [borrowedBooksSnapshot, penaltiesSnapshot, booksSnapshot, reviewsSnapshot] = await Promise.all([
      db.collection("borrowedBooks").where("userId", "==", userId).get(),
      db.collection("penalties").where("userId", "==", userId).get(),
      db.collection("books").limit(100).get(),
      db.collection("reviews").get(),
    ]);

    const borrowedBooks = borrowedBooksSnapshot.docs.map(doc => {
      const data = doc.data();
      return {
        title: data.bookTitle,
        author: data.bookAuthor,
        category: data.bookCategory,
        bookId: data.bookId,
        borrowedAt: data.borrowedAt?.toDate(),
        returnedAt: data.returnedAt?.toDate(),
      };
    });

    // Cezalar
    const penalties = penaltiesSnapshot.docs.map(doc => {
      const data = doc.data();
      return {
        reason: data.reason,
        amount: data.amount,
        isPaid: data.isPaid,
        createdAt: data.createdAt?.toDate(),
      };
    });

    const activePenalties = penalties.filter(p => !p.isPaid);
    const totalPenaltyAmount = activePenalties.reduce((sum, p) => sum + (p.amount || 0), 0);

    // ≈ûu an okuduƒüu kitaplar
    const currentBooks = borrowedBooks.filter(book => !book.returnedAt);

    // Tamamlanan kitaplar
    const completedBooks = borrowedBooks.filter(book => book.returnedAt);

    // Favori kategoriler (en √ßok √∂d√ºn√ß alƒ±nan)
    const categoryCount = new Map<string, number>();
    borrowedBooks.forEach(book => {
      if (book.category) {
        categoryCount.set(book.category, (categoryCount.get(book.category) || 0) + 1);
      }
    });
    const favoriteCategories = Array.from(categoryCount.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 3)
      .map(([category]) => category);

    // Favori yazarlar
    const authorCount = new Map<string, number>();
    borrowedBooks.forEach(book => {
      if (book.author) {
        authorCount.set(book.author, (authorCount.get(book.author) || 0) + 1);
      }
    });
    const favoriteAuthors = Array.from(authorCount.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 3)
      .map(([author]) => author);

    // K√ºt√ºphanedeki mevcut kitaplar (kategorilere ve tag'lere g√∂re grupla)
    const availableBooks = booksSnapshot.docs
      .map(doc => {
        const data = doc.data();
        return {
          title: data.title,
          author: data.author,
          category: data.category,
          tags: data.tags || [],
          pageCount: data.pageCount || 0,
          available: data.available,
        };
      })
      .filter(book => book.available);

    // Kullanƒ±cƒ±nƒ±n favori kategorilerinden √∂neriler
    const recommendedBooks = availableBooks
      .filter(book => favoriteCategories.includes(book.category))
      .slice(0, 10)
      .map(b => `${b.title} - ${b.author}`);

    // Benzer kitap √∂nerileri i√ßin okunan kitaplarƒ±n detaylarƒ±
    const readBooksDetails = completedBooks.slice(-3).map(book => {
      const matchingBook = booksSnapshot.docs.find(doc => doc.data().title === book.title);
      if (matchingBook) {
        const data = matchingBook.data();
        return {
          title: book.title,
          author: book.author,
          category: data.category,
          tags: data.tags || [],
        };
      }
      return null;
    }).filter(b => b !== null);

    // Okunan kitaplara benzer kitaplar bul
    const similarBooks: string[] = [];
    readBooksDetails.forEach(readBook => {
      if (readBook) {
        availableBooks.forEach(availBook => {
          if (availBook.title !== readBook.title) {
            const hasSameCategory = availBook.category === readBook.category;
            const hasCommonTags = readBook.tags.some((tag: string) => availBook.tags.includes(tag));
            if ((hasSameCategory || hasCommonTags) && !similarBooks.includes(`${availBook.title} - ${availBook.author}`)) {
              similarBooks.push(`${availBook.title} - ${availBook.author} (${readBook.title} kitabƒ±na benzer)`);
            }
          }
        });
      }
    });

    // Tag'lere g√∂re grupla (√∂rn: korku, macera, bilim-kurgu)
    const booksByTags = new Map<string, string[]>();
    availableBooks.forEach(book => {
      if (book.tags && Array.isArray(book.tags)) {
        book.tags.forEach((tag: string) => {
          if (!booksByTags.has(tag)) {
            booksByTags.set(tag, []);
          }
          booksByTags.get(tag)!.push(`${book.title} - ${book.author}`);
        });
      }
    });

    // Tag listesini string olarak hazƒ±rla
    const availableTags = Array.from(booksByTags.keys()).join(", ");
    const tagBasedBooks: { [key: string]: string[] } = {};
    booksByTags.forEach((books, tag) => {
      tagBasedBooks[tag] = books.slice(0, 5);
    });

    // Sayfa sayƒ±sƒ±na g√∂re grupla
    const booksByPageCount = {
      short: availableBooks.filter(b => b.pageCount > 0 && b.pageCount < 150).map(b => `${b.title} - ${b.author} (${b.pageCount} sayfa)`),
      medium: availableBooks.filter(b => b.pageCount >= 150 && b.pageCount <= 300).map(b => `${b.title} - ${b.author} (${b.pageCount} sayfa)`),
      long: availableBooks.filter(b => b.pageCount > 300).map(b => `${b.title} - ${b.author} (${b.pageCount} sayfa)`),
    };

    // Kitaplarƒ±n ortalama puanlarƒ±nƒ± hesapla
    const bookRatings = new Map<string, { totalRating: number; count: number }>();
    reviewsSnapshot.docs.forEach(doc => {
      const data = doc.data();
      const bookId = data.bookId;
      const rating = data.rating;
      if (bookId && rating) {
        if (!bookRatings.has(bookId)) {
          bookRatings.set(bookId, { totalRating: 0, count: 0 });
        }
        const current = bookRatings.get(bookId)!;
        current.totalRating += rating;
        current.count += 1;
      }
    });

    // Y√ºksek puanlƒ± kitaplarƒ± bul (4+ yƒ±ldƒ±z ve en az 3 yorum)
    const highRatedBooks: string[] = [];
    booksSnapshot.docs.forEach(doc => {
      const bookData = doc.data();
      const bookId = doc.id;
      const ratingData = bookRatings.get(bookId);
      if (ratingData && ratingData.count >= 3) {
        const avgRating = ratingData.totalRating / ratingData.count;
        if (avgRating >= 4.0 && bookData.available) {
          highRatedBooks.push(`${bookData.title} - ${bookData.author} (‚≠ê ${avgRating.toFixed(1)})`);
        }
      }
    });

    // Puana g√∂re sƒ±rala
    highRatedBooks.sort((a, b) => {
      const ratingA = parseFloat(a.match(/‚≠ê ([\d.]+)/)?.[1] || "0");
      const ratingB = parseFloat(b.match(/‚≠ê ([\d.]+)/)?.[1] || "0");
      return ratingB - ratingA;
    });

    // Yazarlara g√∂re kitaplarƒ± grupla
    const booksByAuthor = new Map<string, string[]>();
    availableBooks.forEach(book => {
      if (book.author) {
        if (!booksByAuthor.has(book.author)) {
          booksByAuthor.set(book.author, []);
        }
        booksByAuthor.get(book.author)!.push(book.title);
      }
    });

    // En √ßok kitabƒ± olan yazarlarƒ± bul
    const topAuthors = Array.from(booksByAuthor.entries())
      .sort((a, b) => b[1].length - a[1].length)
      .slice(0, 10)
      .map(([author, books]) => `${author} (${books.length} kitap): ${books.slice(0, 3).join(", ")}`);

    return {
      name: userData?.displayName || "Kullanƒ±cƒ±",
      email: userData?.email || "",
      level: userData?.level || 1,
      xp: userData?.xp || 0,
      studentClass: userData?.studentClass || "",
      totalBorrowedBooks: borrowedBooks.length,
      currentBooksCount: currentBooks.length,
      completedBooksCount: completedBooks.length,
      currentBooks: currentBooks.map(b => `${b.title} - ${b.author}`),
      recentBooks: completedBooks.slice(-5).map(b => `${b.title} - ${b.author}`),
      favoriteCategories,
      favoriteAuthors,
      activePenaltiesCount: activePenalties.length,
      totalPenaltyAmount,
      penaltyDetails: activePenalties.map(p => `${p.reason} (${p.amount} TL)`),
      availableBooksCount: availableBooks.length,
      recommendedBooks,
      availableTags,
      tagBasedBooks,
      booksByPageCount,
      similarBooks: similarBooks.slice(0, 10),
      highRatedBooks: highRatedBooks.slice(0, 10),
      topAuthors,
      booksByAuthor: Object.fromEntries(booksByAuthor),
    };
  } catch (error) {
    logger.error("Error fetching user context:", error);
    return {
      name: "Kullanƒ±cƒ±",
      email: "",
      level: 1,
      xp: 0,
      studentClass: "",
      totalBorrowedBooks: 0,
      currentBooksCount: 0,
      completedBooksCount: 0,
      currentBooks: [],
      recentBooks: [],
      favoriteCategories: [],
      favoriteAuthors: [],
      activePenaltiesCount: 0,
      totalPenaltyAmount: 0,
      penaltyDetails: [],
      availableBooksCount: 0,
      recommendedBooks: [],
      availableTags: "",
      tagBasedBooks: {},
      booksByPageCount: { short: [], medium: [], long: [] },
      similarBooks: [],
      highRatedBooks: [],
      topAuthors: [],
      booksByAuthor: {},
    };
  }
}

// Amazon Bedrock ile sohbet (retry mekanizmasƒ± ile)
async function chatWithBedrock(userMessage: string, userContext: any, retryCount = 0): Promise<string> {
  const MAX_RETRIES = 2;
  const RETRY_DELAY = 1000;

  const bedrockClient = new BedrockRuntimeClient({
    region: "us-east-1",
    credentials: {
      accessKeyId: awsAccessKeyId.value(),
      secretAccessKey: awsSecretAccessKey.value(),
    },
  });
  const systemPrompt = `Sen "Kitap Dostu" adlƒ± bir k√ºt√ºphane asistanƒ±sƒ±n. √ñƒürencilere kitap √∂neren, okuma motivasyonu saƒülayan ve k√ºt√ºphane hakkƒ±nda bilgi veren yardƒ±mcƒ± bir arkada≈üsƒ±n.

=== KULLANICI PROFƒ∞Lƒ∞ ===
ƒ∞sim: ${userContext.name} | Seviye: ${userContext.level} (${userContext.xp} XP) | Sƒ±nƒ±f: ${userContext.studentClass}

OKUMA ƒ∞STATƒ∞STƒ∞KLERƒ∞:
‚Ä¢ Toplam okunan: ${userContext.totalBorrowedBooks} kitap
‚Ä¢ ≈ûu an okuyor: ${userContext.currentBooksCount} kitap
‚Ä¢ Tamamlanan: ${userContext.completedBooksCount} kitap
‚Ä¢ ≈ûu anki kitaplar: ${userContext.currentBooks.join(", ") || "Yok"}
‚Ä¢ Son okunanlar: ${userContext.recentBooks.join(", ") || "Yok"}
‚Ä¢ Favori kategoriler: ${userContext.favoriteCategories.join(", ") || "Hen√ºz yok"}
‚Ä¢ Favori yazarlar: ${userContext.favoriteAuthors.join(", ") || "Hen√ºz yok"}

CEZA DURUMU:
${userContext.activePenaltiesCount > 0 ? `‚ö†Ô∏è ${userContext.activePenaltiesCount} aktif ceza (${userContext.totalPenaltyAmount} TL) - ${userContext.penaltyDetails.join(", ")}` : "‚úÖ Ceza yok"}

K√úT√úPHANE ENVANTERƒ∞:
‚Ä¢ Mevcut kitap: ${userContext.availableBooksCount}
‚Ä¢ Sana √∂zel √∂neriler: ${userContext.recommendedBooks.slice(0, 5).join(", ") || "Hen√ºz yok"}
‚Ä¢ Mevcut t√ºrler/tag'ler: ${userContext.availableTags || "Hen√ºz yok"}

T√úRE G√ñRE Kƒ∞TAPLAR:
${Object.entries(userContext.tagBasedBooks || {}).slice(0, 5).map(([tag, books]: [string, any]) => `‚Ä¢ ${tag}: ${books.slice(0, 3).join(", ")}`).join("\n") || "Hen√ºz yok"}

SAYFA SAYISINA G√ñRE Kƒ∞TAPLAR:
‚Ä¢ Kƒ±sa (150 sayfa altƒ±): ${userContext.booksByPageCount?.short?.slice(0, 3).join(", ") || "Yok"}
‚Ä¢ Orta (150-300 sayfa): ${userContext.booksByPageCount?.medium?.slice(0, 3).join(", ") || "Yok"}
‚Ä¢ Uzun (300+ sayfa): ${userContext.booksByPageCount?.long?.slice(0, 3).join(", ") || "Yok"}

BENZER Kƒ∞TAP √ñNERƒ∞LERƒ∞ (Okuduƒüun kitaplara benzer):
${userContext.similarBooks?.slice(0, 5).join("\n") || "Hen√ºz yok"}

Y√úKSEK PUANLI Kƒ∞TAPLAR (4+ yƒ±ldƒ±z):
${userContext.highRatedBooks?.slice(0, 5).join("\n") || "Hen√ºz yok"}

YAZARLARA G√ñRE Kƒ∞TAPLAR:
${userContext.topAuthors?.slice(0, 5).join("\n") || "Hen√ºz yok"}

=== YANIT KURALLARI ===

1. TON & √úSLUP:
   - Samimi, arkada≈ü√ßa ama saygƒ±lƒ±
   - Motive edici ama baskƒ±cƒ± deƒüil
   - Emoji kullan (max 3-4 emoji/yanƒ±t)
   - Kƒ±sa ve √∂z yanƒ±tlar (max 150 kelime)

2. Kƒ∞TAP √ñNERƒ∞LERI:
   - Maksimum 3-5 kitap √∂ner
   - Liste formatƒ±nda sun
   - Her kitap i√ßin: Ba≈ülƒ±k - Yazar - Kƒ±sa a√ßƒ±klama (1 c√ºmle)
   - √ñnce favori kategorilerinden, sonra benzer kategorilerden √∂ner
   - SADECE k√ºt√ºphanede mevcut kitaplardan √∂ner
   - Neden √∂nerdiƒüini kƒ±saca a√ßƒ±kla

3. ƒ∞STATƒ∞STƒ∞KLER:
   - Emoji + sayƒ±sal veri formatƒ±nda
   - Kƒ±sa ve g√∂rsel
   - Pozitif vurgu yap

4. CEZA HATIRLATMA:
   - Nazik ve yargƒ±lamadan
   - √á√∂z√ºm odaklƒ±
   - SADECE sorulduƒüunda veya alakalƒ± olduƒüunda bahset

5. KAPSAM SINIRLARI:
   - SADECE k√ºt√ºphane, kitap ve okuma konularƒ±nda yanƒ±t ver
   - √ñdev yapma, kitap √∂zetleme isteklerini nazik√ße reddet
   - Ki≈üisel sorunlar i√ßin rehber √∂ƒüretmene y√∂nlendir
   - K√ºt√ºphane dƒ±≈üƒ± sorulara: "Bu konuda yardƒ±mcƒ± olamam ama k√ºt√ºphane hakkƒ±nda sormak istediƒüin bir ≈üey var mƒ±?"

6. √ñRNEK YANITLAR:
   ‚Ä¢ Kitap isteƒüi: "Merhaba ${userContext.name}! üëã Senin i√ßin harika kitaplar buldum:\n\n1. [Kitap] - [Yazar]: [Neden √∂neriyorum]\n2. [Kitap] - [Yazar]: [Neden √∂neriyorum]\n\nHangisini okumak istersin? üìö"
   ‚Ä¢ ƒ∞statistik: "üéâ Harika gidiyorsun! ≈ûimdiye kadar ${userContext.totalBorrowedBooks} kitap okudun. Seviye ${userContext.level}'desin!"
   ‚Ä¢ Kapsam dƒ±≈üƒ±: "Bu konuda yardƒ±mcƒ± olamam üòä Ama sana g√ºzel kitaplar √∂nerebilirim!"

=== √ñNEMLƒ∞ ===
Her yanƒ±tƒ± kullanƒ±cƒ±nƒ±n profil verilerine g√∂re ki≈üiselle≈ütir. Kƒ±sa, √∂z ve motive edici ol!`;

  const payload = {
    anthropic_version: "bedrock-2023-05-31",
    max_tokens: 1000,
    messages: [
      {
        role: "user",
        content: `${systemPrompt}\n\nKullanƒ±cƒ± Mesajƒ±: ${userMessage}`,
      },
    ],
  };

  try {
    const command = new InvokeModelCommand({
      modelId: "anthropic.claude-3-haiku-20240307-v1:0", // Ucuz ve hƒ±zlƒ± model
      contentType: "application/json",
      accept: "application/json",
      body: JSON.stringify(payload),
    });

    const response = await bedrockClient.send(command);
    const responseBody = JSON.parse(new TextDecoder().decode(response.body));
    
    return responseBody.content[0].text;
  } catch (error: any) {
    logger.error(`Bedrock API Error (attempt ${retryCount + 1}/${MAX_RETRIES + 1}):`, error);

    if (retryCount < MAX_RETRIES) {
      logger.info(`Retrying Bedrock API call in ${RETRY_DELAY}ms...`);
      await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
      return chatWithBedrock(userMessage, userContext, retryCount + 1);
    }

    logger.error("All Bedrock retry attempts failed, using fallback response");
    return getFallbackResponse(userMessage, userContext);
  }
}

// Chat Function
export const chatWithAssistant = onCall(async (request: any) => {
  // Kullanƒ±cƒ± doƒürulama
  if (!request.auth) {
    throw new HttpsError("unauthenticated", "Giri≈ü yapmalƒ±sƒ±nƒ±z.");
  }

  const userId = request.auth.uid;
  const rawMessage = request.data.message;

  const validation = validateMessage(rawMessage);
  if (!validation.valid) {
    throw new HttpsError("invalid-argument", validation.error!);
  }

  const userMessage = sanitizeInput(rawMessage);

  if (userMessage.length < MIN_MESSAGE_LENGTH) {
    throw new HttpsError("invalid-argument", "Mesaj ge√ßersiz i√ßerik i√ßeriyor.");
  }

  // Rate limiting kontrol√º
  const rateLimit = await checkRateLimit(userId);
  if (!rateLimit.allowed) {
    const resetTimeStr = rateLimit.resetTime.toLocaleTimeString("tr-TR", { hour: "2-digit", minute: "2-digit" });
    throw new HttpsError(
      "resource-exhausted",
      `Mesaj limitiniz doldu. L√ºtfen ${resetTimeStr} sonra tekrar deneyin.`
    );
  }

  let aiResponse: string;
  let usedFallback = false;

  try {
    const userContext = await getUserContext(userId);

    try {
      aiResponse = await chatWithBedrock(userMessage, userContext);
      usedFallback = FALLBACK_RESPONSES.some(fb => aiResponse.includes(fb.substring(0, 20)));
    } catch (bedrockError) {
      logger.error("Bedrock completely failed, using fallback:", bedrockError);
      aiResponse = getFallbackResponse(userMessage, userContext);
      usedFallback = true;
    }

    const db = admin.firestore();
    try {
      await db.collection("chatHistory").add({
        userId,
        userMessage: userMessage.substring(0, MAX_MESSAGE_LENGTH),
        aiResponse: aiResponse.substring(0, 2000),
        usedFallback,
        timestamp: admin.firestore.FieldValue.serverTimestamp(),
        metadata: {
          messageLength: userMessage.length,
          responseLength: aiResponse.length,
          sanitized: rawMessage !== userMessage,
        },
      });
    } catch (dbError) {
      logger.error("Failed to save chat history:", dbError);
    }

    logger.info(`Chat completed for user ${userId} (fallback: ${usedFallback})`);

    return {
      response: aiResponse,
      timestamp: new Date().toISOString(),
      remainingMessages: rateLimit.remaining,
      usedFallback,
    };
  } catch (error: any) {
    logger.error("Critical chat error:", error);
    
    if (error.code) {
      throw error;
    }
    
    throw new HttpsError("internal", "Sohbet servisi ≈üu anda kullanƒ±lamƒ±yor. L√ºtfen daha sonra tekrar deneyin.");
  }
});

// ============================================
// ADMIN SOHBET BOTU
// ============================================

// Admin context'ini Firestore'dan √ßek
async function getAdminContext() {
  const db = admin.firestore();
  
  try {
    // T√ºm koleksiyonlarƒ± otomatik tara
    const collections = await db.listCollections();
    const allCollectionsData: any = {};
    
    for (const collection of collections) {
      const snapshot = await collection.get();
      allCollectionsData[collection.id] = {
        count: snapshot.size,
        sampleData: snapshot.docs.slice(0, 3).map(doc => ({ id: doc.id, ...doc.data() })),
      };
    }

    const [usersSnapshot, booksSnapshot, borrowedBooksSnapshot, penaltiesSnapshot, reviewsSnapshot] = await Promise.all([
      db.collection("users").get(),
      db.collection("books").get(),
      db.collection("borrowedBooks").get(),
      db.collection("penalties").get(),
      db.collection("reviews").get(),
    ]);

    // Kullanƒ±cƒ± istatistikleri
    const totalUsers = usersSnapshot.size;
    const usersList = usersSnapshot.docs.map(doc => ({
      id: doc.id,
      name: doc.data().displayName,
      email: doc.data().email,
      level: doc.data().level || 0,
      xp: doc.data().xp || 0,
      studentClass: doc.data().studentClass,
    }));

    // Kitap istatistikleri
    const totalBooks = booksSnapshot.size;
    const availableBooks = booksSnapshot.docs.filter(doc => doc.data().available).length;
    const unavailableBooks = totalBooks - availableBooks;

    // √ñd√ºn√ß alma istatistikleri
    const totalBorrows = borrowedBooksSnapshot.size;
    const activeBorrows = borrowedBooksSnapshot.docs.filter(doc => !doc.data().returnedAt).length;
    const completedBorrows = totalBorrows - activeBorrows;

    // Gecikmi≈ü iadeler
    const now = new Date();
    const overdueBorrows = borrowedBooksSnapshot.docs.filter(doc => {
      const data = doc.data();
      if (!data.returnedAt && data.dueDate) {
        const dueDate = data.dueDate.toDate();
        return dueDate < now;
      }
      return false;
    }).map(doc => {
      const data = doc.data();
      return {
        user: data.userName,
        book: data.bookTitle,
        dueDate: data.dueDate?.toDate(),
      };
    });

    // Ceza istatistikleri
    const totalPenalties = penaltiesSnapshot.size;
    const activePenalties = penaltiesSnapshot.docs.filter(doc => !doc.data().isPaid);
    const totalPenaltyAmount = activePenalties.reduce((sum, doc) => sum + (doc.data().amount || 0), 0);
    const paidPenalties = totalPenalties - activePenalties.length;

    // Kullanƒ±cƒ± bazlƒ± analiz
    const userBorrowCounts = new Map<string, number>();
    borrowedBooksSnapshot.docs.forEach(doc => {
      const userId = doc.data().userId;
      userBorrowCounts.set(userId, (userBorrowCounts.get(userId) || 0) + 1);
    });

    const topReaders = Array.from(userBorrowCounts.entries())
      .map(([userId, count]) => {
        const user = usersList.find(u => u.id === userId);
        return { name: user?.name || "Bilinmeyen", count };
      })
      .sort((a, b) => b.count - a.count)
      .slice(0, 10);

    const inactiveUsers = usersList.filter(user => !userBorrowCounts.has(user.id));

    // Kitap pop√ºlerliƒüi
    const bookBorrowCounts = new Map<string, number>();
    borrowedBooksSnapshot.docs.forEach(doc => {
      const bookTitle = doc.data().bookTitle;
      bookBorrowCounts.set(bookTitle, (bookBorrowCounts.get(bookTitle) || 0) + 1);
    });

    const popularBooks = Array.from(bookBorrowCounts.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .map(([title, count]) => `${title} (${count} kez)`);

    const leastPopularBooks = Array.from(bookBorrowCounts.entries())
      .sort((a, b) => a[1] - b[1])
      .slice(0, 10)
      .map(([title, count]) => `${title} (${count} kez)`);

    // Kategori analizi
    const categoryBorrows = new Map<string, number>();
    borrowedBooksSnapshot.docs.forEach(doc => {
      const category = doc.data().bookCategory;
      if (category) {
        categoryBorrows.set(category, (categoryBorrows.get(category) || 0) + 1);
      }
    });

    const popularCategories = Array.from(categoryBorrows.entries())
      .sort((a, b) => b[1] - a[1])
      .map(([cat, count]) => `${cat}: ${count} √∂d√ºn√ß`);

    // Yorum istatistikleri
    const totalReviews = reviewsSnapshot.size;
    const avgRating = reviewsSnapshot.docs.reduce((sum, doc) => sum + (doc.data().rating || 0), 0) / totalReviews || 0;

    // Aylƒ±k trend
    const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);
    const monthlyBorrows = borrowedBooksSnapshot.docs.filter(doc => {
      const borrowDate = doc.data().borrowedAt?.toDate();
      return borrowDate && borrowDate >= thisMonth;
    }).length;

    // ============================================
    // GELƒ∞≈ûMƒ∞≈û ANALƒ∞Tƒ∞K SORGULAR
    // ============================================

    // 1. Son 7 g√ºnde en √ßok √∂d√ºn√ß alƒ±nan kitaplar
    const last7Days = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
    const recentBorrows = borrowedBooksSnapshot.docs.filter(doc => {
      const borrowDate = doc.data().borrowedAt?.toDate();
      return borrowDate && borrowDate >= last7Days;
    });

    const recentBookCounts = new Map<string, number>();
    recentBorrows.forEach(doc => {
      const bookTitle = doc.data().bookTitle;
      recentBookCounts.set(bookTitle, (recentBookCounts.get(bookTitle) || 0) + 1);
    });

    const topBooksLast7Days = Array.from(recentBookCounts.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .map(([title, count]) => `${title} (${count} kez)`);

    // 2. Bu ay hi√ß kitap almayan kullanƒ±cƒ±lar
    const monthlyBorrowUserIds = new Set(
      borrowedBooksSnapshot.docs
        .filter(doc => {
          const borrowDate = doc.data().borrowedAt?.toDate();
          return borrowDate && borrowDate >= thisMonth;
        })
        .map(doc => doc.data().userId)
    );

    const inactiveThisMonth = usersList.filter(user => !monthlyBorrowUserIds.has(user.id));
    const inactiveThisMonthList = inactiveThisMonth.slice(0, 20).map(u => `${u.name} (${u.studentClass})`);

    // 3. Stok durumu analizi (kategorilere g√∂re)
    const categoryStock = new Map<string, { total: number; available: number; borrowed: number }>();
    booksSnapshot.docs.forEach(doc => {
      const data = doc.data();
      const category = data.category || "Diƒüer";
      if (!categoryStock.has(category)) {
        categoryStock.set(category, { total: 0, available: 0, borrowed: 0 });
      }
      const stock = categoryStock.get(category)!;
      stock.total += 1;
      if (data.available) {
        stock.available += 1;
      } else {
        stock.borrowed += 1;
      }
    });

    const lowStockCategories = Array.from(categoryStock.entries())
      .filter(([_, stock]) => stock.available === 0 || (stock.borrowed / stock.total) > 0.8)
      .map(([cat, stock]) => `${cat}: ${stock.available}/${stock.total} mevcut (${((stock.borrowed / stock.total) * 100).toFixed(0)}% √∂d√ºn√ßte)`);

    const categoryStockList = Array.from(categoryStock.entries())
      .map(([cat, stock]) => `${cat}: ${stock.available}/${stock.total} mevcut`);

    // 4. Ceza oranƒ± en y√ºksek kullanƒ±cƒ±lar
    const userPenaltyCounts = new Map<string, { count: number; amount: number }>();
    penaltiesSnapshot.docs.forEach(doc => {
      const data = doc.data();
      const userId = data.userId;
      if (!userPenaltyCounts.has(userId)) {
        userPenaltyCounts.set(userId, { count: 0, amount: 0 });
      }
      const penalty = userPenaltyCounts.get(userId)!;
      penalty.count += 1;
      penalty.amount += data.amount || 0;
    });

    const highPenaltyUsers = Array.from(userPenaltyCounts.entries())
      .map(([userId, penalty]) => {
        const user = usersList.find(u => u.id === userId);
        const borrowCount = userBorrowCounts.get(userId) || 0;
        const penaltyRate = borrowCount > 0 ? (penalty.count / borrowCount * 100).toFixed(0) : "0";
        return {
          name: user?.name || "Bilinmeyen",
          penaltyCount: penalty.count,
          amount: penalty.amount,
          borrowCount,
          rate: penaltyRate,
        };
      })
      .sort((a, b) => b.penaltyCount - a.penaltyCount)
      .slice(0, 10)
      .map(u => `${u.name}: ${u.penaltyCount} ceza (${u.amount} TL) - √ñd√ºn√ß: ${u.borrowCount}, Oran: %${u.rate}`);

    // 5. Ortalama kitap okuma s√ºresi
    const completedBorrowsWithDuration = borrowedBooksSnapshot.docs
      .filter(doc => doc.data().returnedAt && doc.data().borrowedAt)
      .map(doc => {
        const data = doc.data();
        const borrowDate = data.borrowedAt.toDate();
        const returnDate = data.returnedAt.toDate();
        const durationDays = Math.ceil((returnDate.getTime() - borrowDate.getTime()) / (1000 * 60 * 60 * 24));
        return {
          bookTitle: data.bookTitle,
          category: data.bookCategory,
          duration: durationDays,
        };
      });

    const avgReadingDuration = completedBorrowsWithDuration.length > 0
      ? (completedBorrowsWithDuration.reduce((sum, b) => sum + b.duration, 0) / completedBorrowsWithDuration.length).toFixed(1)
      : "0";

    // Kategoriye g√∂re ortalama okuma s√ºresi
    const categoryDurations = new Map<string, number[]>();
    completedBorrowsWithDuration.forEach(borrow => {
      const cat = borrow.category || "Diƒüer";
      if (!categoryDurations.has(cat)) {
        categoryDurations.set(cat, []);
      }
      categoryDurations.get(cat)!.push(borrow.duration);
    });

    const avgDurationByCategory = Array.from(categoryDurations.entries())
      .map(([cat, durations]) => {
        const avg = (durations.reduce((sum, d) => sum + d, 0) / durations.length).toFixed(1);
        return `${cat}: ${avg} g√ºn (${durations.length} kitap)`;
      })
      .sort();

    // En hƒ±zlƒ± ve en yava≈ü okunan kitaplar
    const sortedByDuration = [...completedBorrowsWithDuration].sort((a, b) => a.duration - b.duration);
    const fastestReads = sortedByDuration.slice(0, 5).map(b => `${b.bookTitle} (${b.duration} g√ºn)`);
    const slowestReads = sortedByDuration.slice(-5).reverse().map(b => `${b.bookTitle} (${b.duration} g√ºn)`);

    // Ge√ßen ay ile kar≈üƒ±la≈ütƒ±rma
    const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
    const lastMonthEnd = new Date(now.getFullYear(), now.getMonth(), 0, 23, 59, 59);
    const lastMonthBorrows = borrowedBooksSnapshot.docs.filter(doc => {
      const borrowDate = doc.data().borrowedAt?.toDate();
      return borrowDate && borrowDate >= lastMonth && borrowDate <= lastMonthEnd;
    }).length;

    const monthlyChange = lastMonthBorrows > 0
      ? (((monthlyBorrows - lastMonthBorrows) / lastMonthBorrows) * 100).toFixed(1)
      : "0";
    const monthlyTrend = parseFloat(monthlyChange) > 0 ? "üìà Artƒ±≈ü" : parseFloat(monthlyChange) < 0 ? "üìâ Azalƒ±≈ü" : "‚û°Ô∏è Sabit";

    // Sƒ±nƒ±f bazlƒ± analiz
    const classBorrowCounts = new Map<string, { users: Set<string>; borrows: number; activeUsers: number }>();
    const classUserMap = new Map<string, any[]>();

    usersList.forEach(user => {
      const studentClass = user.studentClass || "Belirtilmemi≈ü";
      if (!classUserMap.has(studentClass)) {
        classUserMap.set(studentClass, []);
      }
      classUserMap.get(studentClass)!.push(user);
    });

    borrowedBooksSnapshot.docs.forEach(doc => {
      const data = doc.data();
      const user = usersList.find(u => u.id === data.userId);
      if (user) {
        const studentClass = user.studentClass || "Belirtilmemi≈ü";
        if (!classBorrowCounts.has(studentClass)) {
          classBorrowCounts.set(studentClass, { users: new Set(), borrows: 0, activeUsers: 0 });
        }
        const classData = classBorrowCounts.get(studentClass)!;
        classData.users.add(data.userId);
        classData.borrows += 1;
      }
    });

    classBorrowCounts.forEach((data, className) => {
      data.activeUsers = data.users.size;
    });

    const classAnalytics = Array.from(classBorrowCounts.entries()).map(([className, data]) => {
      const totalUsers = classUserMap.get(className)?.length || 0;
      const avgBorrowsPerUser = data.activeUsers > 0 ? (data.borrows / data.activeUsers).toFixed(1) : "0";
      return {
        className,
        totalUsers,
        activeUsers: data.activeUsers,
        inactiveUsers: totalUsers - data.activeUsers,
        totalBorrows: data.borrows,
        avgBorrowsPerUser,
        users: classUserMap.get(className) || [],
      };
    });

    // Her sƒ±nƒ±f i√ßin detaylƒ± kullanƒ±cƒ± bilgileri ve analiz
    const detailedClassData: any = {};
    classAnalytics.forEach(classData => {
      const classUsers = classData.users.map((user: any) => {
        const userBorrows = borrowedBooksSnapshot.docs.filter(doc => doc.data().userId === user.id);
        const userPenalties = penaltiesSnapshot.docs.filter(doc => doc.data().userId === user.id && !doc.data().isPaid);
        const userReviews = reviewsSnapshot.docs.filter(doc => doc.data().userId === user.id);
        
        // Okuma alƒ±≈ükanlƒ±ƒüƒ± analizi
        const completedBorrows = userBorrows.filter(doc => doc.data().returnedAt);
        const overdueBorrows = userBorrows.filter(doc => {
          const data = doc.data();
          if (!data.returnedAt && data.dueDate) {
            return data.dueDate.toDate() < now;
          }
          return false;
        });
        
        // Favori kategoriler
        const userCategories = new Map<string, number>();
        userBorrows.forEach(doc => {
          const cat = doc.data().bookCategory;
          if (cat) userCategories.set(cat, (userCategories.get(cat) || 0) + 1);
        });
        const favoriteCategories = Array.from(userCategories.entries())
          .sort((a, b) => b[1] - a[1])
          .slice(0, 3)
          .map(([cat, count]) => `${cat} (${count})`);
        
        // Ortalama okuma s√ºresi
        const readingDurations = completedBorrows
          .filter(doc => doc.data().borrowedAt && doc.data().returnedAt)
          .map(doc => {
            const data = doc.data();
            const days = Math.ceil((data.returnedAt.toDate().getTime() - data.borrowedAt.toDate().getTime()) / (1000 * 60 * 60 * 24));
            return days;
          });
        const avgReadingDays = readingDurations.length > 0
          ? (readingDurations.reduce((sum, d) => sum + d, 0) / readingDurations.length).toFixed(1)
          : "0";
        
        // Son aktivite
        const lastBorrow = userBorrows.length > 0
          ? userBorrows.sort((a, b) => b.data().borrowedAt?.toDate().getTime() - a.data().borrowedAt?.toDate().getTime())[0].data().borrowedAt?.toDate()
          : null;
        const daysSinceLastActivity = lastBorrow
          ? Math.ceil((now.getTime() - lastBorrow.getTime()) / (1000 * 60 * 60 * 24))
          : null;
        
        // Risk skoru (0-100)
        let riskScore = 0;
        if (userPenalties.length > 0) riskScore += 30;
        if (overdueBorrows.length > 0) riskScore += 25;
        if (userBorrows.length === 0) riskScore += 20;
        if (daysSinceLastActivity && daysSinceLastActivity > 30) riskScore += 15;
        if (userPenalties.length > 2) riskScore += 10;
        
        // √ñƒürenci profili
        let profile = "Normal";
        if (userBorrows.length > 20) profile = "S√ºper Okuyucu";
        else if (userBorrows.length > 10) profile = "Aktif Okuyucu";
        else if (userBorrows.length > 5) profile = "D√ºzenli Okuyucu";
        else if (userBorrows.length > 0) profile = "Yeni Okuyucu";
        else profile = "Pasif";
        
        if (riskScore > 50) profile = "Risk Grubu";
        
        return {
          name: user.name,
          email: user.email,
          studentNumber: user.studentNumber,
          level: user.level,
          xp: user.xp,
          totalBorrows: userBorrows.length,
          completedBorrows: completedBorrows.length,
          activeBorrows: userBorrows.filter(doc => !doc.data().returnedAt).length,
          overdueBorrows: overdueBorrows.length,
          penalties: userPenalties.length,
          penaltyAmount: userPenalties.reduce((sum, doc) => sum + (doc.data().amount || 0), 0),
          reviews: userReviews.length,
          favoriteCategories,
          avgReadingDays,
          daysSinceLastActivity,
          riskScore,
          profile,
          lastBorrowDate: lastBorrow?.toLocaleDateString("tr-TR") || "Hi√ß",
        };
      });
      
      // Sƒ±nƒ±f kategorileri analizi
      const classCategoryPreferences = new Map<string, number>();
      borrowedBooksSnapshot.docs.forEach(doc => {
        const data = doc.data();
        const user = classData.users.find((u: any) => u.id === data.userId);
        if (user && data.bookCategory) {
          classCategoryPreferences.set(data.bookCategory, (classCategoryPreferences.get(data.bookCategory) || 0) + 1);
        }
      });
      
      const topCategories = Array.from(classCategoryPreferences.entries())
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5)
        .map(([cat, count]) => `${cat} (${count} √∂d√ºn√ß)`);

      detailedClassData[classData.className] = {
        summary: {
          totalUsers: classData.totalUsers,
          activeUsers: classData.activeUsers,
          inactiveUsers: classData.inactiveUsers,
          totalBorrows: classData.totalBorrows,
          avgBorrowsPerUser: classData.avgBorrowsPerUser,
          totalPenalties: classUsers.reduce((sum: number, u: any) => sum + u.penalties, 0),
          totalPenaltyAmount: classUsers.reduce((sum: number, u: any) => sum + u.penaltyAmount, 0),
          totalReviews: classUsers.reduce((sum: number, u: any) => sum + u.reviews, 0),
          riskStudents: classUsers.filter((u: any) => u.riskScore > 50).length,
        },
        users: classUsers,
        topReaders: [...classUsers].sort((a: any, b: any) => b.totalBorrows - a.totalBorrows).slice(0, 5),
        inactiveUsers: classUsers.filter((u: any) => u.totalBorrows === 0),
        riskStudents: classUsers.filter((u: any) => u.riskScore > 50),
        superReaders: classUsers.filter((u: any) => u.totalBorrows > 20),
        topCategories,
        recommendations: {
          needsAttention: classUsers.filter((u: any) => u.daysSinceLastActivity && u.daysSinceLastActivity > 30).map((u: any) => u.name),
          needsMotivation: classUsers.filter((u: any) => u.totalBorrows === 0).map((u: any) => u.name),
          penaltyFollowUp: classUsers.filter((u: any) => u.penalties > 0).map((u: any) => `${u.name} (${u.penaltyAmount} TL)`),
        },
      };
    });

    return {
      totalUsers,
      totalBooks,
      availableBooks,
      unavailableBooks,
      totalBorrows,
      activeBorrows,
      completedBorrows,
      totalPenalties,
      activePenaltiesCount: activePenalties.length,
      totalPenaltyAmount,
      paidPenalties,
      overdueCount: overdueBorrows.length,
      overdueBorrows: overdueBorrows.slice(0, 10),
      topReaders,
      inactiveUsersCount: inactiveUsers.length,
      inactiveUsers: inactiveUsers.slice(0, 10).map(u => u.name),
      popularBooks,
      leastPopularBooks,
      popularCategories,
      totalReviews,
      avgRating: avgRating.toFixed(2),
      monthlyBorrows,
      usersList: usersList.slice(0, 20),
      // Geli≈ümi≈ü analitikler
      topBooksLast7Days,
      inactiveThisMonthCount: inactiveThisMonth.length,
      inactiveThisMonthList,
      lowStockCategories,
      categoryStockList,
      highPenaltyUsers,
      avgReadingDuration,
      avgDurationByCategory,
      fastestReads,
      slowestReads,
      lastMonthBorrows,
      monthlyChange,
      monthlyTrend,
      // T√ºm koleksiyonlar
      allCollections: Object.keys(allCollectionsData),
      allCollectionsData,
      // Sƒ±nƒ±f bazlƒ± analitikler
      classAnalytics,
      detailedClassData,
    };
  } catch (error) {
    logger.error("Error fetching admin context:", error);
    return null;
  }
}

// Admin sohbet fonksiyonu
export const chatWithAdminAssistant = onCall({ cors: true }, async (request: any) => {
  if (!request.auth) {
    throw new HttpsError("unauthenticated", "Giri≈ü yapmalƒ±sƒ±nƒ±z.");
  }

  if (request.auth?.token.role !== "admin") {
    throw new HttpsError("permission-denied", "Bu √∂zellik sadece adminler i√ßin.");
  }

  const rawMessage = request.data.message;
  const validation = validateMessage(rawMessage);
  if (!validation.valid) {
    throw new HttpsError("invalid-argument", validation.error!);
  }

  const userMessage = sanitizeInput(rawMessage);

  try {
    const adminContext = await getAdminContext();
    if (!adminContext) {
      throw new HttpsError("internal", "Veri alƒ±namadƒ±.");
    }

    const bedrockClient = new BedrockRuntimeClient({
      region: "us-east-1",
      credentials: {
        accessKeyId: awsAccessKeyId.value(),
        secretAccessKey: awsSecretAccessKey.value(),
      },
    });

    // Sƒ±nƒ±f verilerini JSON string olarak hazƒ±rla
    const classDataJSON = JSON.stringify(adminContext.detailedClassData, null, 2);
    
    const systemPrompt = `Sen "Y√∂netim Asistanƒ±" adlƒ± bir k√ºt√ºphane y√∂netim asistanƒ±sƒ±n. Adminlere detaylƒ± raporlar, analizler ve kullanƒ±cƒ± geli≈ütirme √∂nerileri sunuyorsun.

‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è KRƒ∞Tƒ∞K KURALLAR ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
1. SADECE a≈üaƒüƒ±daki JSON verisinde olan bilgileri kullan
2. JSON'da olmayan hi√ßbir √∂ƒürenci/sƒ±nƒ±f/veri hakkƒ±nda konu≈üma
3. Tahmin yapma, varsayma, uydurma - KESINLIKLE YASAK
4. Bir sƒ±nƒ±f sorulduƒüunda, o sƒ±nƒ±f JSON'da yoksa "Bu sƒ±nƒ±f veritabanƒ±nda bulunamadƒ±" de
5. Her isim, sayƒ±, bilgi JSON'dan AYNEN alƒ±nmalƒ±

=== SINIF VERƒ∞LERƒ∞ (JSON) ===
${classDataJSON}

=== JSON KULLANIM KURALLARI ===
- Bir sƒ±nƒ±f sorulduƒüunda √∂nce JSON'da o sƒ±nƒ±fƒ±n olup olmadƒ±ƒüƒ±nƒ± kontrol et
- Varsa, o sƒ±nƒ±fƒ±n users dizisindeki √∂ƒürencileri kullan
- Yoksa, "Bu sƒ±nƒ±f sistemde kayƒ±tlƒ± deƒüil" de ve durdur
- √ñƒürenci isimleri JSON'daki name alanƒ±ndan AYNEN alƒ±nmalƒ±

=== VERƒ∞TABANI KOLEKSƒ∞YONLARI ===
Mevcut Koleksiyonlar: ${adminContext.allCollections.join(", ")}

Koleksiyon Detaylarƒ±:
${Object.entries(adminContext.allCollectionsData).map(([name, data]: [string, any]) => 
  `‚Ä¢ ${name}: ${data.count} kayƒ±t`
).join("\n")}

=== GENEL ƒ∞STATƒ∞STƒ∞KLER ===
‚Ä¢ Toplam Kullanƒ±cƒ±: ${adminContext.totalUsers}
‚Ä¢ Toplam Kitap: ${adminContext.totalBooks} (Mevcut: ${adminContext.availableBooks}, √ñd√ºn√ßte: ${adminContext.unavailableBooks})
‚Ä¢ Toplam √ñd√ºn√ß: ${adminContext.totalBorrows} (Aktif: ${adminContext.activeBorrows}, Tamamlanan: ${adminContext.completedBorrows})
‚Ä¢ Bu Ay √ñd√ºn√ß: ${adminContext.monthlyBorrows}
‚Ä¢ Gecikmi≈ü ƒ∞ade: ${adminContext.overdueCount}
‚Ä¢ Toplam Ceza: ${adminContext.totalPenalties} (Aktif: ${adminContext.activePenaltiesCount}, √ñdenen: ${adminContext.paidPenalties})
‚Ä¢ √ñdenmemi≈ü Ceza Tutarƒ±: ${adminContext.totalPenaltyAmount} TL
‚Ä¢ Toplam Yorum: ${adminContext.totalReviews} (Ort. Puan: ${adminContext.avgRating})

=== EN √áOK OKUYAN KULLANICILAR ===
${adminContext.topReaders.map((r, i) => `${i + 1}. ${r.name}: ${r.count} kitap`).join("\n")}

=== AKTƒ∞F OLMAYAN KULLANICILAR ===
Toplam: ${adminContext.inactiveUsersCount}
√ñrnekler: ${adminContext.inactiveUsers.join(", ")}

=== POP√úLER Kƒ∞TAPLAR ===
${adminContext.popularBooks.slice(0, 5).join("\n")}

=== EN AZ √ñD√úN√á ALINAN Kƒ∞TAPLAR ===
${adminContext.leastPopularBooks.slice(0, 5).join("\n")}

=== POP√úLER KATEGORƒ∞LER ===
${adminContext.popularCategories.slice(0, 5).join("\n")}

=== GECƒ∞KMƒ∞≈û ƒ∞ADELER ===
${adminContext.overdueBorrows.map(o => `‚Ä¢ ${o.user}: ${o.book}`).join("\n") || "Yok"}

=== GELƒ∞≈ûMƒ∞≈û ANALƒ∞Tƒ∞KLER ===

1. SON 7 G√úNDE EN √áOK √ñD√úN√á ALINAN Kƒ∞TAPLAR:
${adminContext.topBooksLast7Days.slice(0, 5).join("\n") || "Veri yok"}

2. BU AY Hƒ∞√á Kƒ∞TAP ALMAYAN KULLANICILAR:
Toplam: ${adminContext.inactiveThisMonthCount}
√ñrnekler: ${adminContext.inactiveThisMonthList.slice(0, 5).join(", ") || "Yok"}

3. STOK DURUMU ANALƒ∞Zƒ∞:
D√º≈ü√ºk Stok Kategoriler:
${adminContext.lowStockCategories.slice(0, 5).join("\n") || "T√ºm kategorilerde yeterli stok var"}

T√ºm Kategoriler:
${adminContext.categoryStockList.slice(0, 8).join("\n")}

4. CEZA ORANI EN Y√úKSEK KULLANICILAR:
${adminContext.highPenaltyUsers.slice(0, 5).join("\n") || "Veri yok"}

5. OKUMA S√úRESƒ∞ ANALƒ∞Zƒ∞:
Ortalama Okuma S√ºresi: ${adminContext.avgReadingDuration} g√ºn

Kategoriye G√∂re Ortalama:
${adminContext.avgDurationByCategory.slice(0, 5).join("\n") || "Veri yok"}

En Hƒ±zlƒ± Okunan Kitaplar:
${adminContext.fastestReads.join("\n") || "Veri yok"}

En Yava≈ü Okunan Kitaplar:
${adminContext.slowestReads.join("\n") || "Veri yok"}

6. AYLIK TREND ANALƒ∞Zƒ∞:
Bu Ay: ${adminContext.monthlyBorrows} √∂d√ºn√ß
Ge√ßen Ay: ${adminContext.lastMonthBorrows} √∂d√ºn√ß
Deƒüi≈üim: %${adminContext.monthlyChange} ${adminContext.monthlyTrend}

7. SINIF BAZLI ANALƒ∞Tƒ∞KLER:
Mevcut Sƒ±nƒ±flar: ${adminContext.classAnalytics.map((c: any) => c.className).join(", ")}

${adminContext.classAnalytics.map((c: any) => 
  `‚Ä¢ ${c.className}: ${c.totalUsers} √∂ƒürenci (${c.activeUsers} aktif, ${c.inactiveUsers} pasif) - ${c.totalBorrows} √∂d√ºn√ß (Ort: ${c.avgBorrowsPerUser}/ki≈üi)`
).join("\n")}

DETAYLI SINIF VERƒ∞LERƒ∞:
Her sƒ±nƒ±f i√ßin detailedClassData objesi mevcut. √ñrnek: detailedClassData["9-E"]:

SUMMARY (Genel √ñzet):
- totalUsers: Toplam √∂ƒürenci sayƒ±sƒ±
- activeUsers: En az 1 kitap okuyan
- inactiveUsers: Hi√ß kitap okumamƒ±≈ü
- totalBorrows: Toplam √∂d√ºn√ß
- avgBorrowsPerUser: Ki≈üi ba≈üƒ± ortalama
- totalPenalties: Toplam ceza sayƒ±sƒ±
- totalPenaltyAmount: Toplam ceza tutarƒ± (TL)
- totalReviews: Yazƒ±lan yorum sayƒ±sƒ±
- riskStudents: Risk grubundaki √∂ƒürenci sayƒ±sƒ±

USERS (Her √∂ƒürenci i√ßin):
- name, email, studentNumber
- level, xp: Oyunla≈ütƒ±rma verileri
- totalBorrows: Toplam √∂d√ºn√ß
- completedBorrows: Tamamlanan
- activeBorrows: ≈ûu an okuduƒüu
- overdueBorrows: Gecikmi≈ü
- penalties, penaltyAmount: Ceza durumu
- reviews: Yorum sayƒ±sƒ±
- favoriteCategories: En sevdiƒüi kategoriler
- avgReadingDays: Ortalama okuma s√ºresi (g√ºn)
- daysSinceLastActivity: Son aktiviteden bu yana ge√ßen g√ºn
- riskScore: Risk skoru (0-100)
- profile: √ñƒürenci profili (S√ºper Okuyucu, Aktif, Pasif, Risk Grubu vb.)
- lastBorrowDate: Son √∂d√ºn√ß tarihi

TOPREADERS: En √ßok okuyan 5 √∂ƒürenci
INACTIVEUSERS: Hi√ß kitap okumamƒ±≈ü √∂ƒürenciler
RISKSTUDENTS: Risk grubundaki √∂ƒürenciler (riskScore > 50)
SUPERREADERS: S√ºper okuyucular (20+ kitap)
TOPCATEGORIES: Sƒ±nƒ±fƒ±n favori kategorileri

RECOMMENDATIONS (√ñneriler):
- needsAttention: 30+ g√ºnd√ºr aktif olmayan
- needsMotivation: Hi√ß kitap okumamƒ±≈ü
- penaltyFollowUp: Cezasƒ± olan √∂ƒürenciler

=== √ñƒûrENCƒ∞ ANALƒ∞Z YETENEKLERƒ∞ ===
1. Bƒ∞REYSEL ANALƒ∞Z:
   - √ñƒürencinin okuma ge√ßmi≈üi
   - Favori kategoriler ve yazarlar
   - Okuma hƒ±zƒ± ve alƒ±≈ükanlƒ±klarƒ±
   - Risk durumu ve nedenleri
   - Geli≈üim √∂nerileri

2. SINIF ANALƒ∞Zƒ∞:
   - Sƒ±nƒ±f genel performansƒ±
   - Aktif/pasif √∂ƒürenci daƒüƒ±lƒ±mƒ±
   - Sƒ±nƒ±f kategori tercihleri
   - Risk grubu analizi
   - Sƒ±nƒ±flar arasƒ± kar≈üƒ±la≈ütƒ±rma

3. EYLEM √ñNERƒ∞LERƒ∞:
   - Hangi √∂ƒürencilere ula≈üƒ±lmalƒ±
   - Hangi sƒ±nƒ±flara kampanya yapƒ±lmalƒ±
   - Hangi kategorilerde etkinlik d√ºzenlenmeli
   - Ceza takibi gereken √∂ƒürenciler

=== G√ñREVLER ===
1. DETAYLI RAPORLAMA:
   - Genel k√ºt√ºphane performansƒ±
   - Kullanƒ±cƒ± aktivite analizi
   - Kitap pop√ºlerlik trendleri
   - Finansal durum (cezalar)
   - Kategori bazlƒ± analizler

2. KULLANICI GELƒ∞≈ûTƒ∞RME √ñNERƒ∞LERƒ∞:
   - Aktif olmayan kullanƒ±cƒ±larƒ± nasƒ±l motive edebiliriz?
   - Hangi kullanƒ±cƒ±lara √∂zel kampanyalar yapƒ±labilir?
   - Okuma alƒ±≈ükanlƒ±ƒüƒ± geli≈ütirme stratejileri

3. Kƒ∞TAP Y√ñNETƒ∞Mƒ∞ √ñNERƒ∞LERƒ∞:
   - Hangi kitaplar stoktan √ßƒ±karƒ±labilir?
   - Hangi kategorilerde yeni kitap alƒ±nmalƒ±?
   - Pop√ºler kitaplarƒ±n kopyalarƒ± artƒ±rƒ±lmalƒ± mƒ±?

4. PROBLEM TESPƒ∞Tƒ∞:
   - Gecikmi≈ü iadeler i√ßin aksiyon √∂nerileri
   - Ceza tahsilatƒ± stratejileri
   - Sistem iyile≈ütirme √∂nerileri

=== YANIT KURALLARI ===
- Profesyonel ve analitik dil kullan
- HER ƒ∞DDƒ∞AYI sayƒ±sal verilerle destekle
- Somut, uygulanabilir √∂neriler sun
- Kar≈üƒ±la≈ütƒ±rmalƒ± analizler yap
- Trend ve pattern'leri belirt
- Aksiyon √∂nerileri ver (isim, tarih, miktar ile)
- T√ºrk√ße yanƒ±t ver
- ASLA tahmin yapma, sadece mevcut veriyi kullan
- Veri yoksa a√ßƒ±k√ßa belirt

=== √ñNEMLƒ∞ ===
Her yanƒ±tta veri odaklƒ±, detaylƒ± ve uygulanabilir √∂neriler sun!

=== √ñRNEK SORGULAR ===
GENEL ANALƒ∞Z:
- "Son 7 g√ºnde hangi kitaplar pop√ºlerdi?"
- "Bu ay hi√ß kitap almayan kullanƒ±cƒ±lar kimler?"
- "Hangi kategorilerde stok azalƒ±yor?"
- "Ge√ßen aya g√∂re nasƒ±l bir trend var?"

SINIF ANALƒ∞Zƒ∞:
- "9-E sƒ±nƒ±fƒ± hakkƒ±nda detaylƒ± rapor hazƒ±rla"
- "Hangi sƒ±nƒ±f en √ßok kitap okuyor?"
- "10-A sƒ±nƒ±fƒ±ndaki pasif √∂ƒürenciler kimler?"
- "11-B sƒ±nƒ±fƒ±nƒ±n risk grubundaki √∂ƒürencileri analiz et"

√ñƒûRENCƒ∞ ANALƒ∞Zƒ∞:
- "Ahmet Yƒ±lmaz'ƒ±n okuma alƒ±≈ükanlƒ±klarƒ±nƒ± analiz et"
- "En √ßok ceza alan √∂ƒürenciler kimler?"
- "30 g√ºnd√ºr aktif olmayan √∂ƒürencileri listele"
- "S√ºper okuyucularƒ± ve √∂zelliklerini raporla"

EYLEM √ñNERƒ∞LERƒ∞:
- "Hangi √∂ƒürencilere motivasyon maili g√∂ndermeliyim?"
- "Ceza takibi gereken √∂ƒürencileri √∂ncelik sƒ±rasƒ±yla listele"
- "Hangi sƒ±nƒ±fa hangi kategoride kampanya yapmalƒ±yƒ±m?"`;

    const payload = {
      anthropic_version: "bedrock-2023-05-31",
      max_tokens: 3000,
      temperature: 0.1,
      messages: [{ role: "user", content: `${systemPrompt}\n\nAdmin Sorusu: ${userMessage}` }],
    };

    const command = new InvokeModelCommand({
      modelId: "anthropic.claude-3-5-sonnet-20240620-v1:0",
      contentType: "application/json",
      accept: "application/json",
      body: JSON.stringify(payload),
    });

    const response = await bedrockClient.send(command);
    const responseBody = JSON.parse(new TextDecoder().decode(response.body));
    const aiResponse = responseBody.content[0].text;

    const db = admin.firestore();
    await db.collection("adminChatHistory").add({
      adminId: request.auth.uid,
      message: userMessage,
      response: aiResponse,
      timestamp: admin.firestore.FieldValue.serverTimestamp(),
    });

    return { response: aiResponse, timestamp: new Date().toISOString() };
  } catch (error: any) {
    logger.error("Admin chat error:", error);
    throw new HttpsError("internal", "Bir hata olu≈ütu.");
  }
});

// Admin sohbet ge√ßmi≈üini getir
export const getAdminChatHistory = onCall({ cors: true }, async (request: any) => {
  if (!request.auth) {
    throw new HttpsError("unauthenticated", "Giri≈ü yapmalƒ±sƒ±nƒ±z.");
  }

  if (request.auth?.token.role !== "admin") {
    throw new HttpsError("permission-denied", "Bu √∂zellik sadece adminler i√ßin.");
  }

  try {
    const db = admin.firestore();
    const chatSnapshot = await db
      .collection("adminChatHistory")
      .orderBy("timestamp", "desc")
      .limit(50)
      .get();

    const messages = chatSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
    }));

    return { messages: messages.reverse() };
  } catch (error) {
    logger.error("Error fetching admin chat history:", error);
    return { messages: [] };
  }
});

// Sohbet ge√ßmi≈üini getir
export const getChatHistory = onCall(async (request: any) => {
  if (!request.auth) {
    throw new HttpsError("unauthenticated", "Giri≈ü yapmalƒ±sƒ±nƒ±z.");
  }

  const userId = request.auth.uid;
  const limit = request.data.limit || 50;

  try {
    const db = admin.firestore();
    const chatSnapshot = await db
      .collection("chatHistory")
      .where("userId", "==", userId)
      .orderBy("timestamp", "desc")
      .limit(limit)
      .get();

    const messages = chatSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
    }));

    return { messages: messages.reverse() };
  } catch (error) {
    logger.error("Error fetching chat history:", error);
    return { messages: [] };
  }
});
